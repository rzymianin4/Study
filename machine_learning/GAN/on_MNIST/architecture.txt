		self.conv_layer_params = [ ("conv", 1, [3,3,32], {'in_sc': self.in_sc}),
								   ("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   ("conv", 1, [3,3,64], {'in_sc': self.in_sc, 'stride': 2}),
								   #("pool", tf.nn.max_pool, {}),
								   ("conv", 2, [3,3,64], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,64], {'in_sc': self.in_sc}),
								   ("conv", 1, [3,3,128], {'in_sc': self.in_sc, 'stride': 2}),
								   #("pool", tf.nn.max_pool, {}),
								   ("conv", 2, [3,3,128], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,128], {'in_sc': self.in_sc}),
								   ("conv", 1, [3,3,256], {'in_sc': self.in_sc, 'stride': 2}) ]

		self.fully_layer_params = [np.prod(img_shp)] + [1024] + [1]	

#-------------------------------------------------------------------------------------------------

		self.conv_layer_params = [ ("conv", 1, [3,3,32], {'in_sc': self.in_sc}),
								   ("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,32], {'in_sc': self.in_sc}),
								   ("conv", 1, [3,3,64], {'in_sc': self.in_sc, 'stride': 2}),
								   ("conv", 2, [3,3,64], {'in_sc': self.in_sc}),
								   #("conv", 2, [3,3,64], {'in_sc': self.in_sc}),
								   ("conv", 1, [3,3,128], {'in_sc': self.in_sc, 'stride': 2}),
								   ("conv", 2, [3,3,128], {'in_sc': self.in_sc}),
								   #("conv", 1, [3,3,128], {'in_sc': self.in_sc, 'residual': False}),
								   ("conv", 1, [3,3,256], {'in_sc': self.in_sc, 'stride': 2}) ]

		self.fully_layer_params = [self.noise_size] + [np.prod(img_shp)]

#-------------------------------------------------------------------------------------------------

		self.loss_D = -tf.reduce_mean(0.9*tf.log(self.preds_R) + 1.0*tf.log(1-self.preds_F))
		self.loss_G = -tf.reduce_mean(tf.log(self.preds_F))
		
		self.gradloss_D = tf.train.GradientDescentOptimizer(D.learning_rate*10).minimize(self.loss_D, var_list=D.trainables)

#-------------------------------------------------------------------------------------------------

BATCH_SIZE = 128
N_CAT = 10
EPOCH_LEN = 128
NOISE_SIZE = 128
INIT_SCALE = 0.002
DROPOUT = 0.0 # na GAN-ie -- 0.4

# last GAN's layer -- simple deconvolution
# no batch normalization in GAN's deconvs
